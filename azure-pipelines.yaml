name: Azure Pipelines
variables:
  azureServiceConnectionId: 'udacityThirdProjectServiceConnection'

  vmImageName: 'ubuntu-18.04'

  fakeAppName: 'dinhnt-terraform-AppService'
  # Environment name
  environmentName: 'udacity-third-project'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Python version: 3.7
  python.version: '3.7.6'
stages:
- stage: Build
  pool:
    vmImage: $(vmImageName)
  jobs:
  - job: Build
    steps:
    # Needed for Terraform VM deployment
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: '$(KNOWN_HOSTS_ENTRY)'
        sshPublicKey: '$(PUBLIC_RSA_KEY)'
        sshKeySecureFile: 'id_rsa'
    - script: | 
        ssh -o StrictHostKeyChecking=no adminuser@20.239.50.40 "ls -la"
      workingDirectory: $(System.DefaultWorkingDirectory)
      displayName: Testing ssh

    # - task: ArchiveFiles@2
    #   displayName: 'Archive FakeRestAPI'
    #   inputs:
    #     rootFolderOrFile: '$(projectRoot)/automatedtesting/jmeter/fakerestapi'
    #     includeRootFolder: false
    #     archiveType: 'zip'
    #     archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    # - task: CmdLine@2
    #   displayName: Install Newman
    #   inputs:
    #     script: 'sudo npm install -g newman'
    #     workingDirectory: $(System.DefaultWorkingDirectory)
    # - task: CmdLine@2
    #   displayName: Run Regression Tests
    #   continueOnError: true
    #   inputs:
    #     script: 'newman run StarterAPIs.json'
    #     workingDirectory: 'automatedtesting/postman'
    # - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
    #   displayName: 'Upload Package'
    #   artifact: drop-fakerestapi
- stage: Deployment
  pool:
    vmImage: $(vmImageName)
  jobs:
  - job: BuildTerraform
    steps: 
    - script: |
        mkdir temp
      workingDirectory: '$(projectRoot)'
      displayName: "Make temp folder"
    - script: |
        wget https://releases.hashicorp.com/terraform/1.1.9/terraform_1.1.9_linux_amd64.zip
        sudo apt install unzip
        unzip terraform_1.1.9_linux_amd64.zip 
        sudo mv ./terraform /usr/bin/
      workingDirectory: '$(projectRoot)/temp'
      displayName: "Install terraform"

    - script: 'terraform --version'
      workingDirectory: $(System.DefaultWorkingDirectory)
      displayName: Terraform version
    # Build terraform
    # - script: 'export VM_PUBLIC_IP=$(terraform output -raw vm_public_ip_address)'
    #   workingDirectory: $(System.DefaultWorkingDirectory)
    #   displayName: Export Vm public ip
    - bash: |
        echo "##vso[task.setvariable variable=vm_public_ip;isOutput=true]20.239.50.40"
      workingDirectory: $(System.DefaultWorkingDirectory)
      displayName: Export Vm public ip
      name: VmPublicIp


  # - deployment: FakeRestAPI
  #   pool:
  #     vmImage: $(vmImageName)
  #   environment: $(environmentName)
  #   strategy:
  #     runOnce:
  #       deploy:
  #         steps:
  #         - task: AzureWebApp@1
  #           displayName: 'Deploy Azure Web App'
  #           inputs:
  #             azureSubscription: $(azureServiceConnectionId)
  #             appName: $(fakeAppName)
  #             appType: webApp
  #             package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
  - job: SeleniumTesting
    dependsOn: BuildTerraform
    variables:
      vm_public_ip: $[ dependencies.BuildTerraform.outputs['VmPublicIp.vm_public_ip'] ]
    condition: succeeded()
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: '$(KNOWN_HOSTS_ENTRY)'
        sshPublicKey: '$(PUBLIC_RSA_KEY)'
        sshKeySecureFile: 'id_rsa'
    - script: | 
        ssh -o StrictHostKeyChecking=no adminuser@$(vm_public_ip) "ls -la"
      workingDirectory: $(System.DefaultWorkingDirectory)
      displayName: Testing ssh
    - script: | 
        ssh -o StrictHostKeyChecking=no adminuser@$(vm_public_ip) "sudo apt-get upgrade -y; sudo apt-get install python3-pip -y; sudo apt install unzip xvfb libxi6 libgconf-2-4 -y; pip3 install selenium;"
      workingDirectory: $(System.DefaultWorkingDirectory)
      displayName: Vm install lib
    - script: | 
        ssh -o StrictHostKeyChecking=no adminuser@$(vm_public_ip) "pip3 install selenium"
      workingDirectory: $(System.DefaultWorkingDirectory)
      displayName: Install selenium
    - script: | 
        ssh -o StrictHostKeyChecking=no adminuser@$(vm_public_ip) 'sudo curl -sS -o - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add; sudo bash -c "echo 'deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main' >> /etc/apt/sources.list.d/google-chrome.list"; sudo apt -y update; sudo apt -y install google-chrome-stable;'
      workingDirectory: $(System.DefaultWorkingDirectory)
      displayName: Install chrome
    - script: | 
        ssh -o StrictHostKeyChecking=no adminuser@$(vm_public_ip) "wget https://chromedriver.storage.googleapis.com/103.0.5060.24/chromedriver_linux64.zip; unzip chromedriver_linux64.zip;sudo mv chromedriver /usr/bin/chromedriver; sudo chown root:root /usr/bin/chromedriver; sudo chmod +x /usr/bin/chromedriver"
      workingDirectory: $(System.DefaultWorkingDirectory)
      displayName: Install chrome driver      
  # - job: JMeter Testing  
  #   steps:
      # 


  
  # - deployment: VMDeploy
  #   displayName: VMDeploy
  #   environment:
  #     name: VMDeploy
  #     resourceType: VirtualMachine
  #   strategy:
  #     runOnce:
  #       deploy:
  #         steps:
  #         - task: Bash@3
  #           inputs:
  #             targetType: 'inline'
  #             script: |
  #               #! /bin/bash
  #               sudo apt-get upgrade -y
  #               sudo apt-get install python3-pip -y
  #               sudo apt install unzip xvfb libxi6 libgconf-2-4 -y
  #               sudo apt install default-jdk -y
  #               pip3 install selenium
  #               sudo curl -sS -o - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add 
  #               sudo bash -c "echo 'deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main' >> /etc/apt/sources.list.d/google-chrome.list" 
  # sudo apt -y update 
  # sudo apt -y install google-chrome-stable  
  # wget https://chromedriver.storage.googleapis.com/103.0.5060.24/chromedriver_linux64.zip
  # unzip chromedriver_linux64.zip 
  # sudo mv chromedriver /usr/bin/chromedriver 
  # sudo chown root:root /usr/bin/chromedriver 
  # sudo chmod +x /usr/bin/chromedriver 
  #               # export PATH=$PATH:some/path

