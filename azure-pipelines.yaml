name: Azure Pipelines
variables:
  azureServiceConnectionId: 'udacityThirdProjectServiceConnection'

  vmImageName: 'ubuntu-18.04'

  fakeAppName: 'dinhnt-terraform-AppService'
  # Environment name
  environmentName: 'udacity-third-project'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Python version: 3.7
  python.version: '3.7.6'
stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    # Needed for Terraform VM deployment
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: '$(KNOWN_HOSTS_ENTRY)'
        sshPublicKey: '$(PUBLIC_RSA_KEY)'
        sshKeySecureFile: 'id_rsa'
    - script: | 
        ssh -o StrictHostKeyChecking=no adminuser@20.239.50.40 "mkdir work; ls"
      workingDirectory: $(System.DefaultWorkingDirectory)
      displayName: Testing ssh
        
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(projectRoot)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - task: CmdLine@2
      displayName: Install Newman
      inputs:
        script: 'sudo npm install -g newman'
        workingDirectory: $(System.DefaultWorkingDirectory)
    - task: CmdLine@2
      displayName: Run Regression Tests
      continueOnError: true
      inputs:
        script: 'newman run StarterAPIs.json'
        workingDirectory: 'automatedtesting/postman'
    # - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
    #   displayName: 'Upload Package'
    #   artifact: drop-fakerestapi
- stage: Deployment
  jobs:
  # - deployment: FakeRestAPI
  #   pool:
  #     vmImage: $(vmImageName)
  #   environment: $(environmentName)
  #   strategy:
  #     runOnce:
  #       deploy:
  #         steps:
  #         - task: AzureWebApp@1
  #           displayName: 'Deploy Azure Web App'
  #           inputs:
  #             azureSubscription: $(azureServiceConnectionId)
  #             appName: $(fakeAppName)
  #             appType: webApp
  #             package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
  - job: Testing
    steps: 
    - script: |
        wget -qO - terraform.gpg https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/terraform-archive-keyring.gpg
        sudo apt-add-repository "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/terraform-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
        sudo apt update
        sudo apt install terraform=1.1.9
      workingDirectory: $(System.DefaultWorkingDirectory)
      displayName: "Install terraform"

    - script: 'terraform --version'
      workingDirectory: $(System.DefaultWorkingDirectory)
      displayName: Terraform init
    - script: | 
        ssh -o StrictHostKeyChecking=no adminuser@20.239.50.40 "mkdir work; ls"
      workingDirectory: $(System.DefaultWorkingDirectory)
      displayName: Testing ssh
      
        
    


  
  # - deployment: VMDeploy
  #   displayName: NAME
  #   environment:
  #     name:  ENVIRONMENT NAME
  #     resourceType: VirtualMachine
  #     tags: TAG NAME
  #   strategy:
  #     runOnce:
  #       deploy:
  #         steps:
  #         - task: Bash@3
  #           inputs:
  #             targetType: 'inline'
  #             script: |
  #               #! /bin/bash
                
  #               sudo apt-get upgrade -y
  #               sudo apt-get install python3-pip -y
  #               sudo apt-get install unzip -y
  #               sudo apt-get install -y chromium-browser
  #               pip3 install selenium
  #               export PATH=$PATH:some/path


