name: Azure Pipelines
variables:
  azureServiceConnectionId: 'udacityThirdProjectServiceConnection'

  vmImageName: 'ubuntu-18.04'

  fakeAppName: 'dinhnt-terraform-AppService'
  # Environment name
  environmentName: 'udacity-third-project'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Python version: 3.7
  python.version: '3.7.6'
stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    # Needed for Terraform VM deployment
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: '$(KNOWN_HOSTS_ENTRY)'
        sshPublicKey: '$(PUBLIC_RSA_KEY)'
        sshKeySecureFile: 'id_rsa'
    - script: | 
        ssh -o StrictHostKeyChecking=no adminuser@20.239.50.40 "mkdir work; ls"
      workingDirectory: $(System.DefaultWorkingDirectory)
      displayName: Testing ssh
    - script: | 
        ssh -o StrictHostKeyChecking=no adminuser@20.239.50.40 "mkdir azagent;cd azagent;curl -fkSL -o vstsagent.tar.gz https://vstsagentpackage.azureedge.net/agent/2.204.0/vsts-agent-linux-x64-2.204.0.tar.gz;tar -zxvf vstsagent.tar.gz; if [ -x "$(command -v systemctl)" ]; then ./config.sh --environment --environmentname "VMDeploy" --acceptteeeula --agent $HOSTNAME --url https://dev.azure.com/OrganizationDinh/ --work _work --projectname 'UdacityThirdProject' --auth PAT --token 45elda47jwg6uc3ld2byjya5nflix3ickj2nm2pgjcwd5byupb3q --runasservice; sudo ./svc.sh install; sudo ./svc.sh start; else ./config.sh --environment --environmentname "VMDeploy" --acceptteeeula --agent $HOSTNAME --url https://dev.azure.com/OrganizationDinh/ --work _work --projectname 'UdacityThirdProject' --auth PAT --token 45elda47jwg6uc3ld2byjya5nflix3ickj2nm2pgjcwd5byupb3q; ./run.sh; fi"
      workingDirectory: $(System.DefaultWorkingDirectory)
      displayName: Testing ssh
        
    # - task: ArchiveFiles@2
    #   displayName: 'Archive FakeRestAPI'
    #   inputs:
    #     rootFolderOrFile: '$(projectRoot)/automatedtesting/jmeter/fakerestapi'
    #     includeRootFolder: false
    #     archiveType: 'zip'
    #     archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    # - task: CmdLine@2
    #   displayName: Install Newman
    #   inputs:
    #     script: 'sudo npm install -g newman'
    #     workingDirectory: $(System.DefaultWorkingDirectory)
    # - task: CmdLine@2
    #   displayName: Run Regression Tests
    #   continueOnError: true
    #   inputs:
    #     script: 'newman run StarterAPIs.json'
    #     workingDirectory: 'automatedtesting/postman'
    # - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
    #   displayName: 'Upload Package'
    #   artifact: drop-fakerestapi
- stage: Deployment
  jobs:
  # - deployment: FakeRestAPI
  #   pool:
  #     vmImage: $(vmImageName)
  #   environment: $(environmentName)
  #   strategy:
  #     runOnce:
  #       deploy:
  #         steps:
  #         - task: AzureWebApp@1
  #           displayName: 'Deploy Azure Web App'
  #           inputs:
  #             azureSubscription: $(azureServiceConnectionId)
  #             appName: $(fakeAppName)
  #             appType: webApp
  #             package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
  - job: Testing
    steps: 
    - script: |
        mkdir temp
      workingDirectory: '$(projectRoot)'
      displayName: "Make temp folder"
    - script: |
        wget https://releases.hashicorp.com/terraform/1.1.9/terraform_1.1.9_linux_amd64.zip
        sudo apt install unzip
        unzip terraform_1.1.9_linux_amd64.zip 
        sudo mv ./terraform /usr/bin/
      workingDirectory: '$(projectRoot)/temp'
      displayName: "Install terraform"

    - script: 'terraform --version'
      workingDirectory: $(System.DefaultWorkingDirectory)
      displayName: Terraform version
    - script: | 
        ssh -o StrictHostKeyChecking=no adminuser@20.239.50.40 "mkdir work; ls"
      workingDirectory: $(System.DefaultWorkingDirectory)
      displayName: Testing ssh
      
        
    


  
  - deployment: VMDeploy
    displayName: VMDeploy
    environment:
      name: VMDeploy
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                sudo apt-get upgrade -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                pip3 install selenium
                export PATH=$PATH:some/path


